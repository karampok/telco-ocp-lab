---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: green
spec:
  replicas: 2
  selector:
    matchLabels:
      app: green
  template:
    metadata:
      labels:
        app: green
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - green
              topologyKey: "kubernetes.io/hostname"
      # nodeSelector:
      #   kubernetes.io/hostname: "w0"
      containers:
        - name: agnhost
          image: quay.io/karampok/snife:latest
          imagePullPolicy: Always
          securityContext:
            privileged: true
        - name: server
          image: registry.k8s.io/e2e-test-images/agnhost:2.40
          command:
            - /agnhost
            - netexec
            - --http-port=8080
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: http
              containerPort: 8080
        - command: ["bash", "-c"]
          args: ["iperf3 -s -p 60000"]
          image: quay.io/karampok/snife:latest
          imagePullPolicy: Always
          name: iperf3
          ports:
            - name: iperf3
              containerPort: 60000
        - name: signals
          image: quay.io/karampok/snife:latest
          command: ["/bin/bash", "-c", "trap 'echo Received signal: HUP' HUP; \
                                  trap 'echo Received signal: INT' INT; \
                                  trap 'echo Received signal: QUIT' QUIT; \
                                  trap 'echo Received signal: ILL' ILL; \
                                  trap 'echo Received signal: ABRT' ABRT; \
                                  trap 'echo Received signal: FPE' FPE; \
                                  trap 'echo Received signal: KILL' KILL; \
                                  trap 'echo Received signal: SEGV' SEGV; \
                                  trap 'echo Received signal: PIPE' PIPE; \
                                  trap 'echo Received signal: ALRM' ALRM; \
                                  trap 'echo Received signal: TERM; cat /usr/share/message' TERM; \
                                  trap 'echo Received signal: USR1' USR1; \
                                  trap 'echo Received signal: USR2' USR2; \
                                  trap 'echo Received signal: CONT' CONT; \
                                  trap 'echo Received signal: STOP' STOP; \
                                  trap 'echo Received signal: TSTP' TSTP; \
                                  trap 'echo Received signal: TTIN' TTIN; \
                                  trap 'echo Received signal: TTOU' TTOU; \
                                  echo 'Script started. Waiting for signals...'; \
                                  while true; do sleep 1; done"]
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "echo postStart >> /usr/share/message"]
            preStop:
              exec:
                command: ["/bin/sh","-c","env >> /usr/share/message"]
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    metallb.universe.tf/address-pool: green
    metallb.universe.tf/loadBalancerIPs: 5.5.5.1
  name: green-svc-http-cluster
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  allocateLoadBalancerNodePorts: false
  ports:
    - name: http
      port: 5555
      protocol: TCP
      targetPort: 8080
  selector:
    app: green
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    metallb.universe.tf/address-pool: green
    metallb.universe.tf/loadBalancerIPs: 5.5.5.2
    #metallb.universe.tf/allow-shared-ip: "key-to-share"
  name: green-svc-http-local
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  allocateLoadBalancerNodePorts: false
  ports:
    - name: http
      port: 5555
      protocol: TCP
      targetPort: 8080
  selector:
    app: green
# apiVersion: v1
# kind: Service
# metadata:
#   annotations:
#     metallb.universe.tf/address-pool: green
#     metallb.universe.tf/allow-shared-ip: "key-to-share"
#   name: green-svc-iperf-tcp
# spec:
#   type: LoadBalancer
#   externalTrafficPolicy: Cluster
#   allocateLoadBalancerNodePorts: false
#   ports:
#     - name: tcp
#       port: 60000
#       protocol: TCP
#       targetPort: 60000
#   selector:
#     app: green
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   annotations:
#     metallb.universe.tf/address-pool: green
#     metallb.universe.tf/allow-shared-ip: "key-to-share"
#   name: green-svc-iperf-udp
# spec:
#   type: LoadBalancer
#   externalTrafficPolicy: Cluster
#   allocateLoadBalancerNodePorts: false
#   ports:
#     - name: udp
#       port: 60000
#       protocol: UDP
#       targetPort: 60000
#   selector:
#     app: green
#
# show bgp vrf green ipv4 summary
# from green
# alias urlencode="python3 -c \"import sys, urllib.parse; print(urllib.parse.quote(''.join(sys.stdin.readlines())))\""
# curl -s http://6.6.6.1/shell?cmd="$(echo "env|grep -i node" | urlencode)"|jq -r '.output'
