---
run-name: ztp-e2e-${{ github.ref_name }}-${{ github.event_name }}
name: ztp-e2e
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - dev
      - main
  schedule:
    - cron: '0 */5 * * *'
  workflow_dispatch:
jobs:
  stage0:
    name: Setup Virtual Infra
    runs-on: [self-hosted, dev]
    outputs:
      RUNNER: ${{ runner.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Clean Virtual Infra
        run: |
          ./sinfra --clean -auto-timeout 0s --continue-on-error
      - name: Setup Virtual Infra
        run: |
          echo '${{ secrets.PULL_SECRET }}' > .pull-secret.json
          echo '${{ secrets.WG_AUTH }}' > .wg-auth
          ./sinfra --setupInfra -auto-timeout 0s
          virsh dumpxml 5gc-w0|grep emulator
  stage1:
    name: Deploy SNO Cluster
    runs-on: ${{needs.stage0.outputs.RUNNER}}
    needs: [stage0]
    if: needs.stage0.result == 'success'
    steps:
      - name: Deploy SNO using agent-based
        run: |
          podman exec workstation bash -c '
            ./deploy-ocp.sh hub
            export KUBECONFIG=/share/hub/auth/kubeconfig
            openshift-install agent wait-for install-complete --log-level info --dir /share/hub
            oc get co && oc get clusterversion
          '
          echo "wget http://10.0.0.1:9000/hub/auth/kubeconfig -O ~/.kube/hub.yaml"
          echo "curl -s http://10.0.0.1:9000/hub/auth/kubeadmin-\password | xsel --input --clipboard"
  stage2:
    name: Provision HUB Cluster
    runs-on: ${{needs.stage0.outputs.RUNNER}}
    needs: [stage0, stage1]
    if: needs.stage0.result == 'success'
    steps:
      - name: Install ACM/LVM/TALM with gitops
        run: |
          podman exec workstation bash -c '
            oc apply -f hub/hub-provision-argoapp.yaml
          '
      - name: Install ZTP
        run: |
          podman exec workstation bash -c '
            BRANCH=${{ github.ref_name }} PULL_SECRET_PATH=.pull-secret.json ./hub/install-ztp.sh
          '
      - name: Wait HUB to be ready
        run: |
          podman exec workstation bash -c '
            sleep 180
            until oc get MultiClusterHub 2>/dev/null; do sleep 30; done
            until oc get LVMCluster 2>/dev/null; do sleep 30; done
            until oc -n openshift-storage get lvmcluster 2>/dev/null; do sleep 30; done
            oc -n openshift-storage wait lvmcluster lvmcluster --for=jsonpath='{.status.state}'=Ready --timeout=1200s
            oc -n open-cluster-management wait MultiClusterHub multiclusterhub --for=jsonpath='{.status.phase}'=Running --timeout=1200s
          '
      - name: Review argocd sync
        run: |
          podman exec workstation bash -c '
            pass=$(oc get secret -n openshift-gitops openshift-gitops-cluster -o jsonpath="{.data.admin\.password}" |base64 -d)
            argocd login openshift-gitops-server-openshift-gitops.apps.hub.eric.vlab --username admin --insecure --password $pass
            argocd app list
            argocd app get hub-provision
            argocd app get clusters
            argocd app get policies
          '
  stage3:
    name: Wait SPOKE
    runs-on: ${{needs.stage0.outputs.RUNNER}}
    needs: [stage0, stage1, stage2]
    if: needs.stage2.result == 'success'
    steps:
      - name: Enable autosecrets hack
        run: |
          echo '${{ secrets.BMH_SECRET }}' > bmh-secret.yaml
          podman exec workstation bash -c '
            oc apply -f bmh-secret.yaml
            oc apply -k github.com/karampok/autosecret/config/default
            echo "https://openshift-gitops-server-openshift-gitops.apps.hub.eric.vlab/"
          '
      - name: Wait Siteconfig
        run: |
          podman exec workstation bash -c '
            sleep 1200
            oc get bmh -n 5gc -o yaml
            oc get agentclusterinstall -n 5gc 5gc -o yaml
            oc -n 5gc get agents  -o yaml
            oc get managedcluster 5gc -o yaml
            oc get clusterdeployment -n 5gc 5gc -o yml
            oc -n 5gc wait clusterdeployment 5gc --for=condition=Provisioned --timeout=5400s
          '
      - name: Wait Policies
        run: |
          podman exec workstation bash -c '
            sleep 600
            oc get cgu -A
            timeout 540 oc -n 5gc get policies -w || echo ""
            oc get policies -A
            oc -n ztp-install wait cgu 5gc --for=condition=Succeeded --timeout=5400s
          '
      - name: Access spoke cluster
        run: |
          podman exec workstation bash -c '
            oc extract secret/5gc-admin-kubeconfig --to=- -n 5gc > /tmp/ztp5gc.yaml
            export KUBECONFIG=/tmp/ztp5gc.yaml
            oc get clusterversion
            oc get nodes
            oc get operators
          '
  stage4:
    name: Test SPOKE
    runs-on: ${{needs.stage0.outputs.RUNNER}}
    needs: [stage0, stage1, stage2, stage3]
    if: needs.stage3.result == 'success'
    steps:
      - name: Test spoke cluster
        run: |
          podman exec workstation bash -c '
            oc extract secret/5gc-admin-kubeconfig --to=- -n 5gc > /tmp/ztp5gc.yaml
            export KUBECONFIG=/tmp/ztp5gc.yaml

            oc apply -f dayX/dpdk-pod.yaml
            oc apply -f dayX/icmp-frag-case.yaml

            oc wait --for=condition=ready pod dpdk
            oc wait --for=condition=ready pod -l app=bigfile

            sleep 30

            oc logs dpdk
            oc get svc
          '
          podman exec green bash -c '
            wget 5.8.6.1:9000/big.iso
            wget 5.8.6.9:9000/big.iso
          '

# To add github action runner
# https://github.com/karampok/telco-ocp-lab/settings/actions/runners/new
#  mkdir actions-runner && cd actions-runner
#  curl -o actions-runner-linux-x64-2.309.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.309.0/actions-runner-linux-x64-2.309.0.tar.gz
#  tar xzf ./actions-runner-linux-x64-2.309.0.tar.gz
#  ./bin/installdependencies.sh
#  export RUNNER_ALLOW_RUNASROOT=1
#  ./config.sh --url https://github.com/karampok/telco-ocp-lab --token XXXX
#  dnf install tmux
#  tmux new-session -d ./run.sh
